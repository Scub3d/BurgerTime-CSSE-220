
package burgertime;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Rectangle2D.Double;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JFrame;

/**
 * TODO Put here a description of what this class does.
 *
 * @author havensid.
 *         Created Feb 12, 2014.
 */
public class Level {
	
	private String filename;
	private int width;
	private int height;
	// -: null spaces, H: ladders, C: hero/chef, E: enemies, _: floor tiles below null spaces, ~: floor tiles below ladders
	private char[] objs = {'-','H','C','E','_', '~', '=','t','l','m','b','p'};
	private char[][] levelConverted;

	/**
	 * Initializes the Level reader
	 *
	 * @param file
	 * @param width
	 * @param height
	 */
	public Level(String file, int width, int height) {
		this.filename = file;
		this.width = width;
		this.height = height;
		this.levelConverted = new char[this.width][this.height];
		
	}
		
	/**
	 * Reads the given file and creates a char[][] based off it.
	 * This will be used for creating the level itself.
	 *
	 */
	public char[][] readFile() {
        try  {  
            File file = new File(this.filename);
            Scanner in = new Scanner(file);
            int lineNum = 0;

            while (in.hasNextLine()) {
                String line = in.nextLine();
                for(int c = 0; c < line.length(); c++) {
                	for(int i = 0; i < this.objs.length; i++) {
                		if(line.charAt(c) == this.objs[i]) {
                			this.levelConverted[lineNum][c] = this.objs[i];
                		}
                	}
                }
                lineNum ++;
            }
//            for(int i = 0; i < this.levelConverted.length; i++) {
//            	for(int j = 0; j < this.levelConverted[0].length; j++) {
//            		System.out.print(this.levelConverted[i][j]);
//            	}
//            	System.out.println();
//            }
//            System.out.println(this.levelConverted);
            in.close();
        } catch (FileNotFoundException e) {
            System.out.println("File not found");
        	}
		return this.levelConverted;  
    }
	
	private Point[][] coors;
	private boolean hasBeenRun = false;
	public Point[][] setCoors() {
		if(!this.hasBeenRun) {
			this.coors = new Point[this.levelConverted.length][this.levelConverted[0].length];
			//System.out.println("The coordinates of the objects");
			for(int i = 0; i < this.levelConverted.length; i++) {
	         	for(int j = 0; j < this.levelConverted[0].length; j++) {
	         		this.coors[i][j] = new Point(j * (24), i * (24));
	         	}
			}
			this.hasBeenRun = true;
		}
		return this.coors;
	}
	
	public Point2D getCorners(int corner) {
		char[][] charMap = readFile();
		int[] xValues = {-1, 10000, 10000, -1};
		int[] yValues = {10000, 10000, -1, -1};
		
		int xIndex = xValues[corner-1];
		int yIndex = yValues[corner-1];
		
		for(int row = 0; row < charMap.length; row++) {
			int floorWidth = 0;
			for(int column = 0; column < charMap[0].length; column++) {
				if(charMap[row][column] == 'p' || charMap[row][column] == '_' || charMap[row][column] == '~'||charMap[row][column]=='t'||charMap[row][column]=='l'||charMap[row][column]=='m'||charMap[row][column]=='b') {
					floorWidth ++;
				}
			}
			if(floorWidth >= 8) {
				for(int x = 0; x < charMap[row].length; x++) {
					if(charMap[row][x] == '_' || charMap[row][x] == '~') {
						if(corner == 1) {
							if(x > xIndex || row <= yIndex ) {
								xIndex = x;
								yIndex = row;
							}
						} else if (corner == 2) {
							if(x < xIndex || row < yIndex ) {
								xIndex = x;
								yIndex = row;
							}
						} else if (corner == 3) {
							if(x < xIndex || row > yIndex ) {
								xIndex = x;
								yIndex = row;
							}
						} else if (corner == 4) {
							if(x > xIndex || row > yIndex ) {
								xIndex = x;
								yIndex = row;
							}
						}
					}
				}
			}
		}
		
		
		
		Point2D p = new Point2D.Double(xIndex * 24, yIndex * 24);
		String[] s = {"TR", "TL", "BL", "BR"};
		System.out.println("The Coordinates of the " + s[corner - 1] + " corner are ----- x: " + p.getX() + ", y: " + p.getY());
		return p;
	}
	
//	public boolean checkIsValidTile(int x, int y) {
//		boolean[][] terrainMap = getTerrainMap();
//		if(terrainMap[x][y]) {
//			return true;
//		}
//		
//		return false;
//	}
//	
	
	public ArrayList<Burger> getBurger(){
		char[][] charMap= readFile();
		ArrayList<Burger> burgerPieces= new ArrayList<Burger>();
		for(int row=0; row<charMap.length; row++) {
			for(int col = 0; col < charMap[1].length; col++) {
				if(charMap[row][col]=='t'||charMap[row][col]=='l'||charMap[row][col]=='m'||charMap[row][col]=='b'){
					burgerPieces.add(new Burger(row*24, col*24, charMap[row][col]));
				}
			}
		}
		return burgerPieces;
		
	}
	
	
	public boolean[][] getTerrainMap() {

		char[][] charMap = readFile();
		boolean[][] terrain = new boolean[charMap.length][charMap[0].length];
		
		for(int row = 0; row < charMap.length; row++) {
			for(int col = 0; col < charMap[0].length; col++) {
				if(charMap[row][col] == '-' || charMap[row][col] == '=') {
					terrain[row][col] = false;
				} else {
					terrain[row][col] = true;
				}
			}
		}
	

		return terrain;
	}
	
	public boolean canGoLeft(int x, int y,int booMapNum) {
		boolean[][] map = CopyOfGameWorldEnvironment.boMapList.get(booMapNum);
		if(map[x][y] == true) {
			if(y > 0) {
				if(map[x][y - 1] ) {
					return true;
				}
			}
		}
		return false;
	}

	public boolean canGoRight(int x, int y,int booMapNum) {
		boolean[][] map =CopyOfGameWorldEnvironment.boMapList.get(booMapNum);
		if(map[x][y] == true) {
			if(y <= map.length) {
				if(map[x][y + 1] ) {
					return true;
				}
			}
		}
		return false;
	}
	
	public boolean canGoUp(int x, int y,int booMapNum) {
		boolean[][] map = CopyOfGameWorldEnvironment.boMapList.get(booMapNum);
		if(map[x][y] == true) {
			if(x > 0) {
				if(map[x - 1][y]) {
					return true;
				}
			}
		}
		return false;
	}
	
	public boolean canGoDown(int x, int y,int booMapNum) {
		boolean[][] map =CopyOfGameWorldEnvironment.boMapList.get(booMapNum);
		if(map[x][y] == true) {
			if(x < map.length - 1) {
				if(map[x + 1][y]) {
					return true;
				}
			}
		}
		return false;
	}
		
}
