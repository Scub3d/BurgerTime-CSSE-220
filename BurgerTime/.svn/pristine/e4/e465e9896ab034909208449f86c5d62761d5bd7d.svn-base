/**
 * 
 */
package burgertime;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.HashSet;
import java.util.Set;

import javax.swing.JPanel;


/**
 * TODO Put here a description of what this class does.
 *
 * @author maas.
 *         Created Feb 16, 2014.
 */
public class KeyHandler extends JPanel{
	private final Set<Integer> pressed = new HashSet<Integer>();
	
	public KeyHandler(){
		KeyListener listener = new KeyListener(){
			@Override
			public void keyPressed(KeyEvent e) {
				
				int tempX = (int) (Hero.getCenterY() / 24.0);
				int tempY = (int) (Hero.getCenterX() / 23.0);
				//System.out.println(tempX + ", " + tempY + ", " + CopyOfGameWorldEnvironment.level.checkIsValidTile(tempX, tempY));
				int key = e.getKeyCode();
				pressed.add(e.getKeyCode());
				if(pressed.size() > 1)
		    	{
		    		Hero.setVelocityX(0);
		    		Hero.setVelocityY(0);
		    	}
				else if(e.getKeyChar() == 'u' || e.getKeyChar() == 'U')
		    	{
		    		//Next level
					//System.out.println("Next Level");
					if(CopyOfGameWorldEnvironment.levelChooser == 2)
					{
						System.out.println("You are at the last level.");
					}
					else
					{
						CopyOfGameWorldEnvironment.levelChooser++;
					}
		    	}
		    	else if(e.getKeyChar() == 'd' || e.getKeyChar() == 'D')
		    	{
		    		//Previous level
		    		System.out.println("Previous Level");
		    		if(CopyOfGameWorldEnvironment.levelChooser == 0)
					{
						System.out.println("You are at the first level.");
					}
					else
					{
						CopyOfGameWorldEnvironment.levelChooser--;
					}
		    	}
		    	else if(e.getKeyChar() == 'p' || e.getKeyChar() == 'P')
		    	{
		    		//Pause the Game
		    		boolean isPaused = CopyOfGameWorldEnvironment.getPaused();
		    		isPaused = !isPaused;
		    		CopyOfGameWorldEnvironment.setPaused(isPaused);
		    	}
				if(key == KeyEvent.VK_UP) 
				{
					//Move up
					if(CopyOfGameWorldEnvironment.level.canGoUp(tempX, tempY)) {
						Hero.setVelocityY(-12/4);
					}
					else
					{
						Hero.setVelocityY(0);
					}
				}
				else if (key == KeyEvent.VK_LEFT ) 
		    	{
					//Move left
					if(CopyOfGameWorldEnvironment.level.canGoLeft(tempX, tempY)) {
						Hero.setVelocityX(-11.5/4);
					}
					else
					{
						Hero.setVelocityX(0);
					}
		    	}
		    	else if (key== KeyEvent.VK_RIGHT ) 
		    	{
		    		//Move right
		    		if(CopyOfGameWorldEnvironment.level.canGoRight(tempX, tempY)) {
		    			Hero.setVelocityX(11.5/4);
		    		}
		    		else
		    		{
		    			Hero.setVelocityX(0);
		    		}
		    	}
		    	else if (key == KeyEvent.VK_DOWN ) 
		    	{
		    		//Move down
		    		if(CopyOfGameWorldEnvironment.level.canGoDown(tempX, tempY))
		    		{
		    			Hero.setVelocityY(12/4);
		    		}
		    		else
		    		{
		    			Hero.setVelocityY(0);
		    		}
		    		
		    	}
		    	else if(pressed.size() > 1)
		    	{
		    		Hero.setVelocityX(0);
		    		Hero.setVelocityY(0);
		    	}
		    	else if (key == KeyEvent.VK_SPACE) 
		    	{
		    		//spray the pepper spray
		    		int pepperUsed = -1;
		    		int pepperLeft = StatusPanel.getPepper();
		    		if(pepperLeft == 0)
		    		{
		    			System.out.println("Out of pepperspray");
		    		}
		    		else
		    		{
		    			//Stun the guard that was sprayed and change his color.
		    			StatusPanel.setPepper(pepperUsed);
		    			for(Guard c: CopyOfGameWorldEnvironment.guards)
		    			{
		    				if(Hero.getCenterX() + Hero.getWidth()  / 2  + 1*24 >= c.getCenterPoint().getX() - Hero.getWidth() / 2 && Hero.getCenterX() - Hero.getWidth() / 2 - 1*24 <= c.getCenterPoint().getX() + Hero.getWidth() / 2) 
		    				{
		    					if(Hero.getCenterY() + Hero.getHeight() / 2 + 1*24 >= c.getCenterPoint().getY() - Hero.getHeight() / 2 && Hero.getCenterY()  - Hero.getHeight() / 2 - 1*24 <= c.getCenterPoint().getY() + Hero.getHeight() / 2 ) 
		    					{
		    						try {
										c.isSprayed();
									} catch (InterruptedException e1) {
										e1.printStackTrace();
									}
		    						
		    					}
		    				}
		    			}
		    		}
	    		}
			}

			@Override
			public void keyReleased(KeyEvent e) {
				pressed.remove(e.getKeyCode());
				int key = e.getKeyCode();
				if(key == KeyEvent.VK_UP)
				{
					//System.out.println("UP");
					Hero.setVelocityY(0);
					//System.out.println(Hero.getVelocityY());
				}
				else if (e.getKeyCode() == KeyEvent.VK_LEFT) 
		    	{
		    		//Stop left
		    		Hero.setVelocityX(0);
		    	}
		    	else if (e.getKeyCode() == KeyEvent.VK_RIGHT) 
		    	{
		    		//Stop right
		    		Hero.setVelocityX(0);
		    	}
		    	else if (e.getKeyCode() == KeyEvent.VK_DOWN) 
		    	{
		    		//Stop down
		    		Hero.setVelocityY(0);
		    	}
		    	else if (e.getKeyCode() == KeyEvent.VK_SPACE) 
		    	{
		    		//ignored
	    		}
			}

			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
				//Ignored
			}
		};
		addKeyListener(listener);
		setFocusable(true);
		
	}

}
