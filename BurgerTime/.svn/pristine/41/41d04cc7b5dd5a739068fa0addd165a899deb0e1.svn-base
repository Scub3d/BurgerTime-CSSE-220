/**
 * 
 */
package burgertime;

import java.awt.Color;
import java.awt.Component;
import java.awt.Shape;
import java.awt.geom.Line2D.Double;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;



/**
 * Game World that contains the map (w/ characters and burgers) and update statuses.
 *
 * @author havensid.
 *         Created Feb 5, 2014.
 */
public class GameWorld implements Temporal, Environment {
//	private static final long INTERVAL_MS = 10;
	private final int width;
	private final int height;
//	private final Color backgroundColor;
//	private final Shape background;
	private CopyOfGameWorldEnvironment map;
	private Environment world;
	private GameWorldComponent draw;
	private KeyboardHandler keyHandler;
	static final long UPDATE_INTERVAL_MS = 10;
	private final List<BurgTimeChar> guard = new ArrayList<BurgTimeChar>();
	private final List<BurgTimeChar> guardToAdd= new ArrayList<BurgTimeChar>();
	private final List<BurgTimeChar> charToRemove = new ArrayList<BurgTimeChar>();
	private final List<BurgTimeChar> hero = new ArrayList<BurgTimeChar>();
	private final List<BurgTimeChar> heroToAdd= new ArrayList<BurgTimeChar>();
	private boolean isPaused = false;
	
	/**
	 * TODO Put here a description of what this constructor does.
	 *
	 * @param width
	 * @param height
	 * @param color 
	 */
	public GameWorld(int width, int height, Color color) {
		// TODO Auto-generated constructor stub
		this.width=683;
		this.height=650;
		
		this.map = new CopyOfGameWorldEnvironment();
		this.draw = new GameWorldComponent(this.map,this.world);
		
		
		
//		Runnable passingTime = new Runnable(){
//			@Override
//			public void run(){
//				try{
//					while(true){
//						Thread.sleep(INTERVAL_MS);
//						timePassed();
//					}
//				}catch (InterruptedException exception){
//					// Stop
//				}
//			}
//		};
//		new Thread(passingTime).start();
	}


	/**
	 * TODO Put here a description of what this method does.
	 *
	 */
	public void gameFrame() {
		JPanel actionPanel = new JPanel();
		this.keyHandler = new KeyboardHandler(actionPanel, this.draw.hero);
		JFrame frame = new JFrame();
		frame.add(actionPanel);
		frame.setTitle("BurgerTime");
		frame.setSize(this.width, this.height);
		frame.getContentPane().setBackground(Color.black);
		
		frame.getContentPane().add(this.draw);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	
	@Override
	public synchronized void addGuard(BurgTimeChar burgTimeChar) {
		this.guardToAdd.add(burgTimeChar);
	}
	
	@Override
	public synchronized void removeChar(BurgTimeChar burgTimeChar) {
		this.charToRemove.add(burgTimeChar);
	}
	
	@Override
	public synchronized void addHero(BurgTimeChar burgTimeChar) {
		this.heroToAdd.add(burgTimeChar);
	}
	/**
	 * TODO Put here a description of what this method does.
	 *
	 * @param burgTimeChar
	 * @return
	 */
	public synchronized List<BurgTimeChar> getHero(BurgTimeChar burgTimeChar) {
		return this.hero;
	}
	
	@Override
	public boolean isInsideWorldX(Point2D point) {
		return point.getX() >= 0 && point.getX() <= this.width;
	}

	@Override
	public boolean isInsideWorldY(Point2D point) {
		return point.getY() >= 0 && point.getY() <= this.height;
	}

	@Override
	public boolean isInsideWorld(Point2D point) {
		return isInsideWorldX(point) && isInsideWorldY(point);
	}


	/* (non-Javadoc)
	 * @see burgertime.Temporal#timePassed()
	 */
	@Override
	public void timePassed() {
		// TODO Auto-generated method stub
		if (!this.isPaused) {
			for (Temporal t : this.guard) {
				t.timePassed();
			}
		}
		this.guard.removeAll(this.charToRemove);
		this.charToRemove.clear();
		this.guard.addAll(this.guardToAdd);
		this.charToRemove.clear();
	}


	/* (non-Javadoc)
	 * @see burgertime.Temporal#die()
	 */
	@Override
	public void die() {
		//ignored
	}


	/* (non-Javadoc)
	 * @see burgertime.Temporal#setIsPaused(boolean)
	 */
	@Override
	public void setIsPaused(boolean isPaused) {
		// TODO Auto-generated method stub
		this.isPaused = isPaused;
	}


	/* (non-Javadoc)
	 * @see burgertime.Temporal#getIsPaused()
	 */
	@Override
	public boolean getIsPaused() {
		// TODO Auto-generated method stub
		return this.isPaused;
	}


	/* (non-Javadoc)
	 * @see burgertime.Environment#getDrawableParts()
	 */
	@Override
	public List<Drawable> getDrawableParts() {
		// TODO Auto-generated method stub
			return new ArrayList<Drawable>(this.guard);
	}
	

}
